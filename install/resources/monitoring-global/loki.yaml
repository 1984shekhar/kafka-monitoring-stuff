---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: <name>
  namespace: <namespace>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: <name>
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: <name>
    spec:
      volumes:
        - name: config
          configMap:
            name: <name>-config
        - name: chunks
          emptyDir: { }
        - name: index
          emptyDir: { }
      containers:
        - name: loki
          image: 'docker.io/grafana/loki:latest'
          volumeMounts:
            - name: config
              mountPath: /opt/config
            - name: chunks
              mountPath: /loki/chunks
            - name: index
              mountPath: /loki/index
          ports:
            - containerPort: 3100
              protocol: TCP
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: { }
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: <name>-promtail
  namespace: <namespace>
spec:
  replicas: 1
  selector:
    matchLabels:
      app: <name>-promtail
  template:
    metadata:
      labels:
        app: <name>-promtail
    spec:
      serviceAccountName: <name>
      volumes:
        - name: config
          configMap:
            name: <name>-promtail-config
        - name: logs
          hostPath:
            path: "/var/log/pods"
            type: Directory
      containers:
        - name: loki
          image: 'docker.io/grafana/promtail:latest'
          securityContext:
            privileged: true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          args:
            - '-config.file=/opt/config/promtail.yaml'
            - '-print-config-stderr'
          volumeMounts:
            - name: config
              mountPath: /opt/config
            - mountPath: /var/log/pods
              name: logs
          ports:
            - containerPort: 3100
              protocol: TCP
          resources: { }
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: v1
data:
  loki.yaml: |
    target: "all"
kind: ConfigMap
metadata:
  name: <name>-config
  namespace: <namespace>
---
kind: Service
apiVersion: v1
metadata:
  name: <name>-service
  namespace: <namespace>
spec:
  ports:
    - protocol: TCP
      port: 3100
      targetPort: 3100
  selector:
    app: <name>
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: <name>-route
  namespace: <namespace>
spec:
  to:
    kind: Service
    name: <name>-service
    weight: 100
  port:
    targetPort: 3100
  wildcardPolicy: None
---
apiVersion: integreatly.org/v1alpha1
kind: GrafanaDataSource
metadata:
  name: <name>-ds
  namespace: <namespace>
spec:
  datasources:
    - access: proxy
      editable: true
      isDefault: false
      name: Loki
      type: loki
      url: 'http://<name>-service.<namespace>.svc.cluster.local:3100'
      version: 1
  name: kafka.yaml
---
apiVersion: v1
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      http_listen_address: 0.0.0.0
    clients:
      - url: http://<name>-service.<namespace>.svc.cluster.local:3100/loki/api/v1/push
    scrape_configs:
      - job_name: "strimzi"
        pipeline_stages:
        - docker: { }
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_pod_label_name
          target_label: __service__
        - source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: __host__
        - action: drop
          regex: ^$
          source_labels:
          - __service__
        - action: replace
          replacement: $1
          separator: /
          source_labels:
          - __meta_kubernetes_namespace
          - __service__
          target_label: job
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: instance
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_container_name
          target_label: container_name
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - replacement: /var/log/pods/*$1/*.log
          separator: /
          source_labels:
          - __meta_kubernetes_pod_uid
          - __meta_kubernetes_pod_container_name
          target_label: __path__
        kubernetes_sd_configs:
          - role: "pod"
            namespaces:
              names:
                - kafka-cluster
                - kafka-operator
kind: ConfigMap
metadata:
  name: <name>-promtail-config
  namespace: <namespace>
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: <name>
  namespace: <namespace>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: <name>
  namespace: <namespace>
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - security.openshift.io
    resourceNames:
      - privileged
    resources:
      - securitycontextconstraints
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: <name>
  namespace: <namespace>
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: <name>
subjects:
  - kind: ServiceAccount
    name: <name>
    namespace: <namespace>
---
kind: Service
apiVersion: v1
metadata:
  name: <name>-pt-service
  namespace: <namespace>
spec:
  ports:
    - protocol: TCP
      port: 9080
      targetPort: 9080
  selector:
    app: <name>-promtail
  type: ClusterIP
  sessionAffinity: None
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: <name>-pt-route
  namespace: <namespace>
spec:
  to:
    kind: Service
    name: <name>-pt-service
    weight: 100
  port:
    targetPort: 9080
  wildcardPolicy: None